{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1. 4) NumPy Ndarray Creation Routines."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1) **empty().**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Returns a new array of given shape and type, with random values."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[[224 156  38]\n",
      "  [  1 144 143]\n",
      "  [ 38   1  40]]\n",
      "\n",
      " [[158  38   1]\n",
      "  [200 159  38]\n",
      "  [  1 200 159]]\n",
      "\n",
      " [[ 38   1 200]\n",
      "  [159  38   1]\n",
      "  [200 159  38]]]\n",
      "\n",
      "------------------\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "\n",
    "x = np.empty([3, 3, 3], np.uint8)\n",
    "print(x)\n",
    "print(\"\\n------------------\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "2) **eye().**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Returns a 2-D array with ones on the diagonal and zeros elsewhere."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[1 0 0 0 0]\n",
      " [0 1 0 0 0]\n",
      " [0 0 1 0 0]\n",
      " [0 0 0 1 0]\n",
      " [0 0 0 0 1]]\n",
      "\n",
      "------------------\n"
     ]
    }
   ],
   "source": [
    "y = np.eye(5, dtype = np.uint8)\n",
    "print(y)\n",
    "print(\"\\n------------------\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The eye() function may take a third argument as an optional argument, which is k. This argument shifts the main diagonal upwards or downwards according to the value of itself."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "1------------------\n",
      "\n",
      "[[0 1 0 0 0]\n",
      " [0 0 1 0 0]\n",
      " [0 0 0 1 0]\n",
      " [0 0 0 0 1]\n",
      " [0 0 0 0 0]]\n",
      "\n",
      "-------------------\n",
      "\n",
      "\n",
      "2------------------\n",
      "\n",
      "[[0 0 0 0 0]\n",
      " [1 0 0 0 0]\n",
      " [0 1 0 0 0]\n",
      " [0 0 1 0 0]\n",
      " [0 0 0 1 0]]\n",
      "\n",
      "-------------------\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(\"\\n1------------------\\n\")\n",
    "# The position of diagonal elements will be shifted upwards.\n",
    "y = np.eye(5, dtype = np.uint8, k = 1)\n",
    "print(y)\n",
    "print(\"\\n-------------------\\n\")\n",
    "\n",
    "\n",
    "print(\"\\n2------------------\\n\")\n",
    "# The position of diagonal elements will be shifted downwards.\n",
    "y = np.eye(5, dtype = np.uint8, k = -1)\n",
    "print(y)\n",
    "print(\"\\n-------------------\\n\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "3) **identity().**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Returns the identity array."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[1 0 0 0 0]\n",
      " [0 1 0 0 0]\n",
      " [0 0 1 0 0]\n",
      " [0 0 0 1 0]\n",
      " [0 0 0 0 1]]\n",
      "\n",
      "------------------\n"
     ]
    }
   ],
   "source": [
    "x = np.identity(5, dtype = np.uint8)\n",
    "print(x)\n",
    "print(\"\\n------------------\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "4) **ones().**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Returns a new array of given shape and type, filled with ones."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[[1 1]\n",
      "  [1 1]]\n",
      "\n",
      " [[1 1]\n",
      "  [1 1]]]\n",
      "\n",
      "------------------\n"
     ]
    }
   ],
   "source": [
    "x = np.ones((2, 2, 2), dtype = np.int16)\n",
    "print(x)\n",
    "print(\"\\n------------------\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "5) **zeros().**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Returns a new array of given shape and type, filled with zeros."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[[0 0]\n",
      "  [0 0]]\n",
      "\n",
      " [[0 0]\n",
      "  [0 0]]]\n",
      "\n",
      "------------------\n"
     ]
    }
   ],
   "source": [
    "x = np.zeros((2, 2, 2), dtype = np.int16)\n",
    "print(x)\n",
    "print(\"\\n------------------\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "6) **full().**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Returns a new array of given shape and type, filled with the given value."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[[5 5 5]\n",
      "  [5 5 5]\n",
      "  [5 5 5]]\n",
      "\n",
      " [[5 5 5]\n",
      "  [5 5 5]\n",
      "  [5 5 5]]\n",
      "\n",
      " [[5 5 5]\n",
      "  [5 5 5]\n",
      "  [5 5 5]]]\n",
      "\n",
      "------------------\n"
     ]
    }
   ],
   "source": [
    "x = np.full((3, 3, 3), dtype = np.int16, fill_value = 5)\n",
    "print(x)\n",
    "print(\"\\n------------------\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "7) **tri().**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "An array with ones at and below the given diagonal and zeros elsewhere."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[1 0 0]\n",
      " [1 1 0]\n",
      " [1 1 1]]\n",
      "\n",
      "------------------\n"
     ]
    }
   ],
   "source": [
    "x = np.tri(3, 3, k = 0, dtype = np.uint16)\n",
    "print(x)\n",
    "print(\"\\n------------------\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The tri() function may take a third argument as an optional argument, which is k. This argument shifts the main diagonal upwards or downwards according to the value of itself."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "1------------------\n",
      "\n",
      "[[1 1 0]\n",
      " [1 1 1]\n",
      " [1 1 1]]\n",
      "\n",
      "-------------------\n",
      "\n",
      "\n",
      "2------------------\n",
      "\n",
      "[[0 0 0]\n",
      " [1 0 0]\n",
      " [1 1 0]]\n",
      "\n",
      "-------------------\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# The position of diagonal elements will be shifted upwards.\n",
    "print(\"\\n1------------------\\n\")\n",
    "x = np.tri(3, 3, k = 1, dtype = np.uint16)\n",
    "print(x)\n",
    "print(\"\\n-------------------\\n\")\n",
    "\n",
    "# The position of diagonal elements will be shifted downwards.\n",
    "print(\"\\n2------------------\\n\")\n",
    "x = np.tri(3, 3, k = -1, dtype = np.uint16)\n",
    "print(x)\n",
    "print(\"\\n-------------------\\n\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "8) **tril().**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Lower triangle of an array. Returns a copy of an array with elements above the k-th diagonal zeroed."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0 0 0 0 0]\n",
      " [1 0 0 0 0]\n",
      " [1 1 0 0 0]\n",
      " [1 1 1 0 0]\n",
      " [1 1 1 1 0]]\n",
      "\n",
      "-------------------\n",
      "\n"
     ]
    }
   ],
   "source": [
    "x = np.ones((5, 5), dtype = np.int8)\n",
    "y = np.tril(x, k = -1)\n",
    "print(y)\n",
    "print(\"\\n-------------------\\n\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "9) **triu().**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Upper triangle of an array. Returns a copy of a matrix with the elements below the k-th diagonal zeroed."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0 1 1 1 1]\n",
      " [0 0 1 1 1]\n",
      " [0 0 0 1 1]\n",
      " [0 0 0 0 1]\n",
      " [0 0 0 0 0]]\n"
     ]
    }
   ],
   "source": [
    "x = np.ones((5, 5), dtype = np.int8)\n",
    "y = np.triu(x, k = 1)\n",
    "print(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
